
Final Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013e  00800100  00000b9a  00000c2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  0080023e  0080023e  00000d6c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015c9  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d9b  00000000  00000000  0000246d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008a0  00000000  00000000  00003208  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  00003aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000755  00000000  00000000  00003d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005d9  00000000  00000000  000044a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004a82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	23 c1       	rjmp	.+582    	; 0x24c <__vector_1>
   6:	00 00       	nop
   8:	cc c2       	rjmp	.+1432   	; 0x5a2 <__vector_2>
   a:	00 00       	nop
   c:	63 c0       	rjmp	.+198    	; 0xd4 <__vector_3>
   e:	00 00       	nop
  10:	70 c0       	rjmp	.+224    	; 0xf2 <__vector_4>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	52 c0       	rjmp	.+164    	; 0x11a <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	12 e0       	ldi	r17, 0x02	; 2
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ea e9       	ldi	r30, 0x9A	; 154
  ac:	fb e0       	ldi	r31, 0x0B	; 11
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	ae 33       	cpi	r26, 0x3E	; 62
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	22 e0       	ldi	r18, 0x02	; 2
  c0:	ae e3       	ldi	r26, 0x3E	; 62
  c2:	b2 e0       	ldi	r27, 0x02	; 2
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a3 36       	cpi	r26, 0x63	; 99
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	f0 d3       	rcall	.+2016   	; 0x8b0 <main>
  d0:	62 c5       	rjmp	.+2756   	; 0xb96 <_exit>

000000d2 <__bad_interrupt>:
  d2:	fc c0       	rjmp	.+504    	; 0x2cc <__vector_default>

000000d4 <__vector_3>:
/*	DESC: Initializes the head and tail to 'NULL'
	INPUT: the head and tail pointers by reference 
*/
void setup(link **h,link **t) {
	*h = NULL;		/* Point the head to NOTHING (NULL) */
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <STATE>
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <__vector_4>:
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <flag_HE+0x1>
 108:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <flag_HE>
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <__vector_29>:
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	0b b6       	in	r0, 0x3b	; 59
 126:	0f 92       	push	r0
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	ef 93       	push	r30
 132:	ff 93       	push	r31
 134:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 138:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 13c:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <ADC_result>
 140:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <ADC_result+0x1>
 144:	28 17       	cp	r18, r24
 146:	39 07       	cpc	r19, r25
 148:	40 f4       	brcc	.+16     	; 0x15a <__vector_29+0x40>
 14a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 14e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 152:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <ADC_result+0x1>
 156:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <ADC_result>
 15a:	49 9b       	sbis	0x09, 1	; 9
 15c:	06 c0       	rjmp	.+12     	; 0x16a <__vector_29+0x50>
 15e:	ea e7       	ldi	r30, 0x7A	; 122
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	80 64       	ori	r24, 0x40	; 64
 166:	80 83       	st	Z, r24
 168:	0b c0       	rjmp	.+22     	; 0x180 <__vector_29+0x66>
 16a:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <ADC_result>
 16e:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <ADC_result+0x1>
 172:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <ADC_final+0x1>
 176:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <ADC_final>
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <STATE>
 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0b be       	out	0x3b, r0	; 59
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <setup_IO>:
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	81 b9       	out	0x01, r24	; 1
 19e:	84 b9       	out	0x04, r24	; 4
 1a0:	87 b9       	out	0x07, r24	; 7
 1a2:	80 ef       	ldi	r24, 0xF0	; 240
 1a4:	8a b9       	out	0x0a, r24	; 10
 1a6:	8d ef       	ldi	r24, 0xFD	; 253
 1a8:	80 bb       	out	0x10, r24	; 16
 1aa:	08 95       	ret

000001ac <setup_INT>:
 1ac:	e8 9a       	sbi	0x1d, 0	; 29
 1ae:	e9 e6       	ldi	r30, 0x69	; 105
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	82 60       	ori	r24, 0x02	; 2
 1b6:	80 83       	st	Z, r24
 1b8:	e9 9a       	sbi	0x1d, 1	; 29
 1ba:	80 81       	ld	r24, Z
 1bc:	8c 60       	ori	r24, 0x0C	; 12
 1be:	80 83       	st	Z, r24
 1c0:	ea 9a       	sbi	0x1d, 2	; 29
 1c2:	80 81       	ld	r24, Z
 1c4:	80 62       	ori	r24, 0x20	; 32
 1c6:	80 83       	st	Z, r24
 1c8:	eb 9a       	sbi	0x1d, 3	; 29
 1ca:	80 81       	ld	r24, Z
 1cc:	80 68       	ori	r24, 0x80	; 128
 1ce:	80 83       	st	Z, r24
 1d0:	08 95       	ret

000001d2 <setup_ADC>:
 1d2:	ea e7       	ldi	r30, 0x7A	; 122
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	80 68       	ori	r24, 0x80	; 128
 1da:	80 83       	st	Z, r24
 1dc:	80 81       	ld	r24, Z
 1de:	88 60       	ori	r24, 0x08	; 8
 1e0:	80 83       	st	Z, r24
 1e2:	ec e7       	ldi	r30, 0x7C	; 124
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	81 64       	ori	r24, 0x41	; 65
 1ea:	80 83       	st	Z, r24
 1ec:	08 95       	ret

000001ee <pwm>:
 1ee:	85 b5       	in	r24, 0x25	; 37
 1f0:	82 60       	ori	r24, 0x02	; 2
 1f2:	85 bd       	out	0x25, r24	; 37
 1f4:	84 b5       	in	r24, 0x24	; 36
 1f6:	83 60       	ori	r24, 0x03	; 3
 1f8:	84 bd       	out	0x24, r24	; 36
 1fa:	84 b5       	in	r24, 0x24	; 36
 1fc:	80 68       	ori	r24, 0x80	; 128
 1fe:	84 bd       	out	0x24, r24	; 36
 200:	80 e5       	ldi	r24, 0x50	; 80
 202:	87 bd       	out	0x27, r24	; 39
 204:	08 95       	ret

00000206 <mTimer>:
 206:	ac 01       	movw	r20, r24
 208:	e1 e8       	ldi	r30, 0x81	; 129
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	90 81       	ld	r25, Z
 20e:	91 60       	ori	r25, 0x01	; 1
 210:	90 83       	st	Z, r25
 212:	90 81       	ld	r25, Z
 214:	98 60       	ori	r25, 0x08	; 8
 216:	90 83       	st	Z, r25
 218:	88 ee       	ldi	r24, 0xE8	; 232
 21a:	93 e0       	ldi	r25, 0x03	; 3
 21c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 220:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 224:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 228:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 22c:	b1 9a       	sbi	0x16, 1	; 22
 22e:	20 e0       	ldi	r18, 0x00	; 0
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	05 c0       	rjmp	.+10     	; 0x23e <mTimer+0x38>
 234:	b1 9b       	sbis	0x16, 1	; 22
 236:	fe cf       	rjmp	.-4      	; 0x234 <mTimer+0x2e>
 238:	b1 9a       	sbi	0x16, 1	; 22
 23a:	2f 5f       	subi	r18, 0xFF	; 255
 23c:	3f 4f       	sbci	r19, 0xFF	; 255
 23e:	24 17       	cp	r18, r20
 240:	35 07       	cpc	r19, r21
 242:	1c f4       	brge	.+6      	; 0x24a <mTimer+0x44>
 244:	b1 9b       	sbis	0x16, 1	; 22
 246:	f6 cf       	rjmp	.-20     	; 0x234 <mTimer+0x2e>
 248:	f7 cf       	rjmp	.-18     	; 0x238 <mTimer+0x32>
 24a:	08 95       	ret

0000024c <__vector_1>:
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	0b b6       	in	r0, 0x3b	; 59
 258:	0f 92       	push	r0
 25a:	2f 93       	push	r18
 25c:	3f 93       	push	r19
 25e:	4f 93       	push	r20
 260:	5f 93       	push	r21
 262:	6f 93       	push	r22
 264:	7f 93       	push	r23
 266:	8f 93       	push	r24
 268:	9f 93       	push	r25
 26a:	af 93       	push	r26
 26c:	bf 93       	push	r27
 26e:	ef 93       	push	r30
 270:	ff 93       	push	r31
 272:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <flag_pause>
 276:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <flag_pause+0x1>
 27a:	89 2b       	or	r24, r25
 27c:	69 f4       	brne	.+26     	; 0x298 <__vector_1+0x4c>
 27e:	84 e1       	ldi	r24, 0x14	; 20
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	c1 df       	rcall	.-126    	; 0x206 <mTimer>
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <flag_pause+0x1>
 28c:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <flag_pause>
 290:	84 e0       	ldi	r24, 0x04	; 4
 292:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <STATE>
 296:	07 c0       	rjmp	.+14     	; 0x2a6 <__vector_1+0x5a>
 298:	84 e1       	ldi	r24, 0x14	; 20
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	b4 df       	rcall	.-152    	; 0x206 <mTimer>
 29e:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <flag_pause+0x1>
 2a2:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <flag_pause>
 2a6:	ff 91       	pop	r31
 2a8:	ef 91       	pop	r30
 2aa:	bf 91       	pop	r27
 2ac:	af 91       	pop	r26
 2ae:	9f 91       	pop	r25
 2b0:	8f 91       	pop	r24
 2b2:	7f 91       	pop	r23
 2b4:	6f 91       	pop	r22
 2b6:	5f 91       	pop	r21
 2b8:	4f 91       	pop	r20
 2ba:	3f 91       	pop	r19
 2bc:	2f 91       	pop	r18
 2be:	0f 90       	pop	r0
 2c0:	0b be       	out	0x3b, r0	; 59
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <__vector_default>:
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	ca ea       	ldi	r28, 0xAA	; 170
 2d8:	c8 b9       	out	0x08, r28	; 8
 2da:	84 ef       	ldi	r24, 0xF4	; 244
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	93 df       	rcall	.-218    	; 0x206 <mTimer>
 2e0:	18 b8       	out	0x08, r1	; 8
 2e2:	84 ef       	ldi	r24, 0xF4	; 244
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	8f df       	rcall	.-226    	; 0x206 <mTimer>
 2e8:	f7 cf       	rjmp	.-18     	; 0x2d8 <__vector_default+0xc>

000002ea <stepper_INIT>:
 2ea:	4b 9b       	sbis	0x09, 3	; 9
 2ec:	2e c0       	rjmp	.+92     	; 0x34a <stepper_INIT+0x60>
 2ee:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <flag_HE>
 2f2:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <flag_HE+0x1>
 2f6:	89 2b       	or	r24, r25
 2f8:	41 f5       	brne	.+80     	; 0x34a <stepper_INIT+0x60>
 2fa:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end>
 2fe:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <__data_end+0x1>
 302:	01 96       	adiw	r24, 0x01	; 1
 304:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <__data_end+0x1>
 308:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <__data_end>
 30c:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end>
 310:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <__data_end+0x1>
 314:	04 97       	sbiw	r24, 0x04	; 4
 316:	24 f0       	brlt	.+8      	; 0x320 <stepper_INIT+0x36>
 318:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <__data_end+0x1>
 31c:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <__data_end>
 320:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <__data_end>
 324:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <__data_end+0x1>
 328:	ee 0f       	add	r30, r30
 32a:	ff 1f       	adc	r31, r31
 32c:	ea 5c       	subi	r30, 0xCA	; 202
 32e:	fd 4f       	sbci	r31, 0xFD	; 253
 330:	80 81       	ld	r24, Z
 332:	82 b9       	out	0x02, r24	; 2
 334:	84 e1       	ldi	r24, 0x14	; 20
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	66 df       	rcall	.-308    	; 0x206 <mTimer>
 33a:	4b 9b       	sbis	0x09, 3	; 9
 33c:	06 c0       	rjmp	.+12     	; 0x34a <stepper_INIT+0x60>
 33e:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <flag_HE>
 342:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <flag_HE+0x1>
 346:	89 2b       	or	r24, r25
 348:	c1 f2       	breq	.-80     	; 0x2fa <stepper_INIT+0x10>
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <bin+0x1>
 352:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <bin>
 356:	08 95       	ret

00000358 <stepper_RUN>:
 358:	af 92       	push	r10
 35a:	bf 92       	push	r11
 35c:	cf 92       	push	r12
 35e:	df 92       	push	r13
 360:	ef 92       	push	r14
 362:	ff 92       	push	r15
 364:	0f 93       	push	r16
 366:	1f 93       	push	r17
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	8b 01       	movw	r16, r22
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	91 05       	cpc	r25, r1
 372:	09 f0       	breq	.+2      	; 0x376 <stepper_RUN+0x1e>
 374:	43 c0       	rjmp	.+134    	; 0x3fc <stepper_RUN+0xa4>
 376:	16 16       	cp	r1, r22
 378:	17 06       	cpc	r1, r23
 37a:	0c f0       	brlt	.+2      	; 0x37e <stepper_RUN+0x26>
 37c:	89 c0       	rjmp	.+274    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 37e:	ce ec       	ldi	r28, 0xCE	; 206
 380:	d1 e0       	ldi	r29, 0x01	; 1
 382:	0f 2e       	mov	r0, r31
 384:	f6 e0       	ldi	r31, 0x06	; 6
 386:	cf 2e       	mov	r12, r31
 388:	f1 e0       	ldi	r31, 0x01	; 1
 38a:	df 2e       	mov	r13, r31
 38c:	f0 2d       	mov	r31, r0
 38e:	cb 01       	movw	r24, r22
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	9c 01       	movw	r18, r24
 396:	22 53       	subi	r18, 0x32	; 50
 398:	3e 4f       	sbci	r19, 0xFE	; 254
 39a:	79 01       	movw	r14, r18
 39c:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end>
 3a0:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <__data_end+0x1>
 3a4:	01 96       	adiw	r24, 0x01	; 1
 3a6:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <__data_end+0x1>
 3aa:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <__data_end>
 3ae:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end>
 3b2:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <__data_end+0x1>
 3b6:	04 97       	sbiw	r24, 0x04	; 4
 3b8:	24 f0       	brlt	.+8      	; 0x3c2 <stepper_RUN+0x6a>
 3ba:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <__data_end+0x1>
 3be:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <__data_end>
 3c2:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <__data_end>
 3c6:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <__data_end+0x1>
 3ca:	ee 0f       	add	r30, r30
 3cc:	ff 1f       	adc	r31, r31
 3ce:	ea 5c       	subi	r30, 0xCA	; 202
 3d0:	fd 4f       	sbci	r31, 0xFD	; 253
 3d2:	80 81       	ld	r24, Z
 3d4:	82 b9       	out	0x02, r24	; 2
 3d6:	02 33       	cpi	r16, 0x32	; 50
 3d8:	11 05       	cpc	r17, r1
 3da:	21 f4       	brne	.+8      	; 0x3e4 <stepper_RUN+0x8c>
 3dc:	88 81       	ld	r24, Y
 3de:	99 81       	ldd	r25, Y+1	; 0x01
 3e0:	12 df       	rcall	.-476    	; 0x206 <mTimer>
 3e2:	04 c0       	rjmp	.+8      	; 0x3ec <stepper_RUN+0x94>
 3e4:	f6 01       	movw	r30, r12
 3e6:	80 81       	ld	r24, Z
 3e8:	91 81       	ldd	r25, Z+1	; 0x01
 3ea:	0d df       	rcall	.-486    	; 0x206 <mTimer>
 3ec:	22 96       	adiw	r28, 0x02	; 2
 3ee:	f2 e0       	ldi	r31, 0x02	; 2
 3f0:	cf 0e       	add	r12, r31
 3f2:	d1 1c       	adc	r13, r1
 3f4:	ce 15       	cp	r28, r14
 3f6:	df 05       	cpc	r29, r15
 3f8:	89 f6       	brne	.-94     	; 0x39c <stepper_RUN+0x44>
 3fa:	4a c0       	rjmp	.+148    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 3fc:	02 97       	sbiw	r24, 0x02	; 2
 3fe:	09 f0       	breq	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	47 c0       	rjmp	.+142    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 402:	16 16       	cp	r1, r22
 404:	17 06       	cpc	r1, r23
 406:	0c f0       	brlt	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 408:	43 c0       	rjmp	.+134    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 40a:	ce ec       	ldi	r28, 0xCE	; 206
 40c:	d1 e0       	ldi	r29, 0x01	; 1
 40e:	0f 2e       	mov	r0, r31
 410:	f6 e0       	ldi	r31, 0x06	; 6
 412:	af 2e       	mov	r10, r31
 414:	f1 e0       	ldi	r31, 0x01	; 1
 416:	bf 2e       	mov	r11, r31
 418:	f0 2d       	mov	r31, r0
 41a:	cb 01       	movw	r24, r22
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	9c 01       	movw	r18, r24
 422:	22 53       	subi	r18, 0x32	; 50
 424:	3e 4f       	sbci	r19, 0xFE	; 254
 426:	79 01       	movw	r14, r18
 428:	0f 2e       	mov	r0, r31
 42a:	f3 e0       	ldi	r31, 0x03	; 3
 42c:	cf 2e       	mov	r12, r31
 42e:	d1 2c       	mov	r13, r1
 430:	f0 2d       	mov	r31, r0
 432:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end>
 436:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <__data_end+0x1>
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <__data_end+0x1>
 440:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <__data_end>
 444:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end>
 448:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <__data_end+0x1>
 44c:	99 23       	and	r25, r25
 44e:	24 f4       	brge	.+8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 450:	d0 92 3f 02 	sts	0x023F, r13	; 0x80023f <__data_end+0x1>
 454:	c0 92 3e 02 	sts	0x023E, r12	; 0x80023e <__data_end>
 458:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <__data_end>
 45c:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <__data_end+0x1>
 460:	ee 0f       	add	r30, r30
 462:	ff 1f       	adc	r31, r31
 464:	ea 5c       	subi	r30, 0xCA	; 202
 466:	fd 4f       	sbci	r31, 0xFD	; 253
 468:	80 81       	ld	r24, Z
 46a:	82 b9       	out	0x02, r24	; 2
 46c:	02 33       	cpi	r16, 0x32	; 50
 46e:	11 05       	cpc	r17, r1
 470:	21 f4       	brne	.+8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 472:	88 81       	ld	r24, Y
 474:	99 81       	ldd	r25, Y+1	; 0x01
 476:	c7 de       	rcall	.-626    	; 0x206 <mTimer>
 478:	04 c0       	rjmp	.+8      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 47a:	f5 01       	movw	r30, r10
 47c:	80 81       	ld	r24, Z
 47e:	91 81       	ldd	r25, Z+1	; 0x01
 480:	c2 de       	rcall	.-636    	; 0x206 <mTimer>
 482:	22 96       	adiw	r28, 0x02	; 2
 484:	f2 e0       	ldi	r31, 0x02	; 2
 486:	af 0e       	add	r10, r31
 488:	b1 1c       	adc	r11, r1
 48a:	ce 15       	cp	r28, r14
 48c:	df 05       	cpc	r29, r15
 48e:	89 f6       	brne	.-94     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	1f 91       	pop	r17
 496:	0f 91       	pop	r16
 498:	ff 90       	pop	r15
 49a:	ef 90       	pop	r14
 49c:	df 90       	pop	r13
 49e:	cf 90       	pop	r12
 4a0:	bf 90       	pop	r11
 4a2:	af 90       	pop	r10
 4a4:	08 95       	ret

000004a6 <process_obj>:
 4a6:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <ADC_final>
 4aa:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <ADC_final+0x1>
 4ae:	8f 35       	cpi	r24, 0x5F	; 95
 4b0:	91 40       	sbci	r25, 0x01	; 1
 4b2:	40 f4       	brcc	.+16     	; 0x4c4 <process_obj+0x1e>
 4b4:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <tail>
 4b8:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <tail+0x1>
 4bc:	84 e0       	ldi	r24, 0x04	; 4
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	91 83       	std	Z+1, r25	; 0x01
 4c2:	80 83       	st	Z, r24
 4c4:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <ADC_final>
 4c8:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <ADC_final+0x1>
 4cc:	8f 35       	cpi	r24, 0x5F	; 95
 4ce:	91 40       	sbci	r25, 0x01	; 1
 4d0:	78 f0       	brcs	.+30     	; 0x4f0 <process_obj+0x4a>
 4d2:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <ADC_final>
 4d6:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <ADC_final+0x1>
 4da:	8c 3b       	cpi	r24, 0xBC	; 188
 4dc:	92 40       	sbci	r25, 0x02	; 2
 4de:	40 f4       	brcc	.+16     	; 0x4f0 <process_obj+0x4a>
 4e0:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <tail>
 4e4:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <tail+0x1>
 4e8:	83 e0       	ldi	r24, 0x03	; 3
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	91 83       	std	Z+1, r25	; 0x01
 4ee:	80 83       	st	Z, r24
 4f0:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <ADC_final>
 4f4:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <ADC_final+0x1>
 4f8:	8c 3b       	cpi	r24, 0xBC	; 188
 4fa:	92 40       	sbci	r25, 0x02	; 2
 4fc:	78 f0       	brcs	.+30     	; 0x51c <process_obj+0x76>
 4fe:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <ADC_final>
 502:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <ADC_final+0x1>
 506:	8d 3a       	cpi	r24, 0xAD	; 173
 508:	93 40       	sbci	r25, 0x03	; 3
 50a:	40 f4       	brcc	.+16     	; 0x51c <process_obj+0x76>
 50c:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <tail>
 510:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <tail+0x1>
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	91 83       	std	Z+1, r25	; 0x01
 51a:	80 83       	st	Z, r24
 51c:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <ADC_final>
 520:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <ADC_final+0x1>
 524:	8d 3a       	cpi	r24, 0xAD	; 173
 526:	93 40       	sbci	r25, 0x03	; 3
 528:	78 f0       	brcs	.+30     	; 0x548 <process_obj+0xa2>
 52a:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <ADC_final>
 52e:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <ADC_final+0x1>
 532:	81 15       	cp	r24, r1
 534:	94 40       	sbci	r25, 0x04	; 4
 536:	40 f4       	brcc	.+16     	; 0x548 <process_obj+0xa2>
 538:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <tail>
 53c:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <tail+0x1>
 540:	82 e0       	ldi	r24, 0x02	; 2
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	91 83       	std	Z+1, r25	; 0x01
 546:	80 83       	st	Z, r24
 548:	08 95       	ret

0000054a <initLink>:
	return;
}

/*	DESC: Initializes a new link 
*/
void initLink(link **newLink) {
 54a:	cf 93       	push	r28
 54c:	df 93       	push	r29
 54e:	ec 01       	movw	r28, r24
	*newLink = malloc(sizeof(link));
 550:	84 e0       	ldi	r24, 0x04	; 4
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	ff d1       	rcall	.+1022   	; 0x954 <malloc>
 556:	99 83       	std	Y+1, r25	; 0x01
 558:	88 83       	st	Y, r24
	(*newLink)->next = NULL;
 55a:	fc 01       	movw	r30, r24
 55c:	13 82       	std	Z+3, r1	; 0x03
 55e:	12 82       	std	Z+2, r1	; 0x02
	return;
}
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	08 95       	ret

00000566 <enqueue>:

/*	DESC: Adds the new link to the end of the FIFO queue.
	INPUT: The head, tail, and newLink pointers by reference 
*/
void enqueue(link **h, link **t, link **nL){
	if (*t != NULL) {		//if not an empty queue
 566:	db 01       	movw	r26, r22
 568:	ed 91       	ld	r30, X+
 56a:	fc 91       	ld	r31, X
 56c:	30 97       	sbiw	r30, 0x00	; 0
 56e:	61 f0       	breq	.+24     	; 0x588 <enqueue+0x22>
		(*t)->next = *nL;
 570:	da 01       	movw	r26, r20
 572:	8d 91       	ld	r24, X+
 574:	9c 91       	ld	r25, X
 576:	11 97       	sbiw	r26, 0x01	; 1
 578:	93 83       	std	Z+3, r25	; 0x03
 57a:	82 83       	std	Z+2, r24	; 0x02
		*t = *nL;			
 57c:	8d 91       	ld	r24, X+
 57e:	9c 91       	ld	r25, X
 580:	fb 01       	movw	r30, r22
 582:	91 83       	std	Z+1, r25	; 0x01
 584:	80 83       	st	Z, r24
 586:	08 95       	ret
	}
	else {					//if an empty queue
		*h = *nL;			
 588:	da 01       	movw	r26, r20
 58a:	2d 91       	ld	r18, X+
 58c:	3c 91       	ld	r19, X
 58e:	11 97       	sbiw	r26, 0x01	; 1
 590:	fc 01       	movw	r30, r24
 592:	31 83       	std	Z+1, r19	; 0x01
 594:	20 83       	st	Z, r18
		*t = *nL;
 596:	8d 91       	ld	r24, X+
 598:	9c 91       	ld	r25, X
 59a:	db 01       	movw	r26, r22
 59c:	8d 93       	st	X+, r24
 59e:	9c 93       	st	X, r25
 5a0:	08 95       	ret

000005a2 <__vector_2>:
	}	
}

/* DESC: Reflective Sensor OR: Interrupt Service Routine 
*/
ISR(INT1_vect){
 5a2:	1f 92       	push	r1
 5a4:	0f 92       	push	r0
 5a6:	0f b6       	in	r0, 0x3f	; 63
 5a8:	0f 92       	push	r0
 5aa:	11 24       	eor	r1, r1
 5ac:	0b b6       	in	r0, 0x3b	; 59
 5ae:	0f 92       	push	r0
 5b0:	2f 93       	push	r18
 5b2:	3f 93       	push	r19
 5b4:	4f 93       	push	r20
 5b6:	5f 93       	push	r21
 5b8:	6f 93       	push	r22
 5ba:	7f 93       	push	r23
 5bc:	8f 93       	push	r24
 5be:	9f 93       	push	r25
 5c0:	af 93       	push	r26
 5c2:	bf 93       	push	r27
 5c4:	ef 93       	push	r30
 5c6:	ff 93       	push	r31
	ADC_result = 0xFFFF;	//set ADC to highest value, ADC will search for the minimum 
 5c8:	8f ef       	ldi	r24, 0xFF	; 255
 5ca:	9f ef       	ldi	r25, 0xFF	; 255
 5cc:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <ADC_result+0x1>
 5d0:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <ADC_result>
	ADCSRA |= _BV(ADSC);	//start ADC conversion
 5d4:	ea e7       	ldi	r30, 0x7A	; 122
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	80 81       	ld	r24, Z
 5da:	80 64       	ori	r24, 0x40	; 64
 5dc:	80 83       	st	Z, r24
	initLink(&newLink);		//initialize a new link
 5de:	85 e5       	ldi	r24, 0x55	; 85
 5e0:	92 e0       	ldi	r25, 0x02	; 2
 5e2:	b3 df       	rcall	.-154    	; 0x54a <initLink>
	enqueue(&head, &tail, &newLink); //add new link to FIFO queue
 5e4:	45 e5       	ldi	r20, 0x55	; 85
 5e6:	52 e0       	ldi	r21, 0x02	; 2
 5e8:	6e e4       	ldi	r22, 0x4E	; 78
 5ea:	72 e0       	ldi	r23, 0x02	; 2
 5ec:	82 e5       	ldi	r24, 0x52	; 82
 5ee:	92 e0       	ldi	r25, 0x02	; 2
 5f0:	ba df       	rcall	.-140    	; 0x566 <enqueue>
}
 5f2:	ff 91       	pop	r31
 5f4:	ef 91       	pop	r30
 5f6:	bf 91       	pop	r27
 5f8:	af 91       	pop	r26
 5fa:	9f 91       	pop	r25
 5fc:	8f 91       	pop	r24
 5fe:	7f 91       	pop	r23
 600:	6f 91       	pop	r22
 602:	5f 91       	pop	r21
 604:	4f 91       	pop	r20
 606:	3f 91       	pop	r19
 608:	2f 91       	pop	r18
 60a:	0f 90       	pop	r0
 60c:	0b be       	out	0x3b, r0	; 59
 60e:	0f 90       	pop	r0
 610:	0f be       	out	0x3f, r0	; 63
 612:	0f 90       	pop	r0
 614:	1f 90       	pop	r1
 616:	18 95       	reti

00000618 <dequeue>:
}

/*	DESC: Removes link from the head of the FIFO queue and assigns to dequeued link.
	INPUT: The head, tail, and deQueuedLink pointers by reference 
*/
void dequeue(link **h, link **t, link **deQueuedLink){
 618:	fc 01       	movw	r30, r24
	*deQueuedLink = *h;		
 61a:	80 81       	ld	r24, Z
 61c:	91 81       	ldd	r25, Z+1	; 0x01
 61e:	da 01       	movw	r26, r20
 620:	8d 93       	st	X+, r24
 622:	9c 93       	st	X, r25
	if (*h != NULL) {		//check if an empty queue
 624:	a0 81       	ld	r26, Z
 626:	b1 81       	ldd	r27, Z+1	; 0x01
 628:	10 97       	sbiw	r26, 0x00	; 0
 62a:	41 f0       	breq	.+16     	; 0x63c <dequeue+0x24>
		*h = (*h)->next;
 62c:	12 96       	adiw	r26, 0x02	; 2
 62e:	8d 91       	ld	r24, X+
 630:	9c 91       	ld	r25, X
 632:	13 97       	sbiw	r26, 0x03	; 3
 634:	91 83       	std	Z+1, r25	; 0x01
 636:	80 83       	st	Z, r24
	}
	
	if(*h == NULL) {
 638:	89 2b       	or	r24, r25
 63a:	19 f4       	brne	.+6      	; 0x642 <dequeue+0x2a>
	*t = NULL;
 63c:	fb 01       	movw	r30, r22
 63e:	11 82       	std	Z+1, r1	; 0x01
 640:	10 82       	st	Z, r1
 642:	08 95       	ret

00000644 <sort_obj>:
/* DESC: Obtains object type from FIFO link and compares to current bin position. Stepper motor
		 is rotated to reach corresponding bin position and bin count is incremented 
*/
void sort_obj(){
	
	dequeue(&head, &tail, &rtnLink);	//dequeue first element from FIFO queue
 644:	48 e4       	ldi	r20, 0x48	; 72
 646:	52 e0       	ldi	r21, 0x02	; 2
 648:	6e e4       	ldi	r22, 0x4E	; 78
 64a:	72 e0       	ldi	r23, 0x02	; 2
 64c:	82 e5       	ldi	r24, 0x52	; 82
 64e:	92 e0       	ldi	r25, 0x02	; 2
 650:	e3 df       	rcall	.-58     	; 0x618 <dequeue>
	object = rtnLink->obj_type;			//get current object type from FIFO link
 652:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <rtnLink>
 656:	f0 91 49 02 	lds	r31, 0x0249	; 0x800249 <rtnLink+0x1>
 65a:	80 81       	ld	r24, Z
 65c:	91 81       	ldd	r25, Z+1	; 0x01
 65e:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <object+0x1>
 662:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <object>
	
	if (object == ALUMINUM) {			//check if object type is aluminum
 666:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <object>
 66a:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <object+0x1>
 66e:	04 97       	sbiw	r24, 0x04	; 4
 670:	81 f5       	brne	.+96     	; 0x6d2 <sort_obj+0x8e>
		if (bin == STEEL) {				
 672:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <bin>
 676:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <bin+0x1>
 67a:	03 97       	sbiw	r24, 0x03	; 3
 67c:	29 f4       	brne	.+10     	; 0x688 <sort_obj+0x44>
			stepper_RUN(CCW,STEP_180);
 67e:	64 e6       	ldi	r22, 0x64	; 100
 680:	70 e0       	ldi	r23, 0x00	; 0
 682:	82 e0       	ldi	r24, 0x02	; 2
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	68 de       	rcall	.-816    	; 0x358 <stepper_RUN>
		}
		if (bin == WHITE) {
 688:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <bin>
 68c:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <bin+0x1>
 690:	01 97       	sbiw	r24, 0x01	; 1
 692:	29 f4       	brne	.+10     	; 0x69e <sort_obj+0x5a>
			stepper_RUN(CCW,STEP_90);
 694:	62 e3       	ldi	r22, 0x32	; 50
 696:	70 e0       	ldi	r23, 0x00	; 0
 698:	82 e0       	ldi	r24, 0x02	; 2
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	5d de       	rcall	.-838    	; 0x358 <stepper_RUN>
		}
		if (bin == BLACK) {
 69e:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <bin>
 6a2:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <bin+0x1>
 6a6:	02 97       	sbiw	r24, 0x02	; 2
 6a8:	29 f4       	brne	.+10     	; 0x6b4 <sort_obj+0x70>
			stepper_RUN(CW,STEP_90);
 6aa:	62 e3       	ldi	r22, 0x32	; 50
 6ac:	70 e0       	ldi	r23, 0x00	; 0
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	52 de       	rcall	.-860    	; 0x358 <stepper_RUN>
		}
		bin = ALUMINUM;					//set current bin to aluminum
 6b4:	84 e0       	ldi	r24, 0x04	; 4
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <bin+0x1>
 6bc:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <bin>
		bin_AL++;						//increment aluminum bin count
 6c0:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <bin_AL>
 6c4:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <bin_AL+0x1>
 6c8:	01 96       	adiw	r24, 0x01	; 1
 6ca:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <bin_AL+0x1>
 6ce:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <bin_AL>
	}
	if (object == STEEL) {				//check if object type is steel
 6d2:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <object>
 6d6:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <object+0x1>
 6da:	03 97       	sbiw	r24, 0x03	; 3
 6dc:	81 f5       	brne	.+96     	; 0x73e <sort_obj+0xfa>
		if (bin == ALUMINUM) {
 6de:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <bin>
 6e2:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <bin+0x1>
 6e6:	04 97       	sbiw	r24, 0x04	; 4
 6e8:	29 f4       	brne	.+10     	; 0x6f4 <sort_obj+0xb0>
			stepper_RUN(CCW,STEP_180);
 6ea:	64 e6       	ldi	r22, 0x64	; 100
 6ec:	70 e0       	ldi	r23, 0x00	; 0
 6ee:	82 e0       	ldi	r24, 0x02	; 2
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	32 de       	rcall	.-924    	; 0x358 <stepper_RUN>
		}
		if (bin == WHITE) {
 6f4:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <bin>
 6f8:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <bin+0x1>
 6fc:	01 97       	sbiw	r24, 0x01	; 1
			stepper_RUN(CW,STEP_90);
 6fe:	29 f4       	brne	.+10     	; 0x70a <sort_obj+0xc6>
 700:	62 e3       	ldi	r22, 0x32	; 50
 702:	70 e0       	ldi	r23, 0x00	; 0
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	27 de       	rcall	.-946    	; 0x358 <stepper_RUN>
		}
		if (bin == BLACK) {
 70a:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <bin>
 70e:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <bin+0x1>
 712:	02 97       	sbiw	r24, 0x02	; 2
			stepper_RUN(CCW,STEP_90);
 714:	29 f4       	brne	.+10     	; 0x720 <sort_obj+0xdc>
 716:	62 e3       	ldi	r22, 0x32	; 50
 718:	70 e0       	ldi	r23, 0x00	; 0
 71a:	82 e0       	ldi	r24, 0x02	; 2
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	1c de       	rcall	.-968    	; 0x358 <stepper_RUN>
		}
		bin = STEEL;					//set current bin to steel
 720:	83 e0       	ldi	r24, 0x03	; 3
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <bin+0x1>
 728:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <bin>
		bin_ST++;						//increment steel bin count
 72c:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <bin_ST>
 730:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <bin_ST+0x1>
 734:	01 96       	adiw	r24, 0x01	; 1
 736:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <bin_ST+0x1>
 73a:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <bin_ST>
	}
	if (object == WHITE) {				//check if object type is white
 73e:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <object>
 742:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <object+0x1>
 746:	01 97       	sbiw	r24, 0x01	; 1
 748:	81 f5       	brne	.+96     	; 0x7aa <sort_obj+0x166>
		if (bin == BLACK) {
 74a:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <bin>
 74e:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <bin+0x1>
 752:	02 97       	sbiw	r24, 0x02	; 2
			stepper_RUN(CCW,STEP_180);	
 754:	29 f4       	brne	.+10     	; 0x760 <sort_obj+0x11c>
 756:	64 e6       	ldi	r22, 0x64	; 100
 758:	70 e0       	ldi	r23, 0x00	; 0
 75a:	82 e0       	ldi	r24, 0x02	; 2
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	fc dd       	rcall	.-1032   	; 0x358 <stepper_RUN>
		}
		if (bin == ALUMINUM) {
 760:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <bin>
 764:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <bin+0x1>
 768:	04 97       	sbiw	r24, 0x04	; 4
			stepper_RUN(CW,STEP_90);
 76a:	29 f4       	brne	.+10     	; 0x776 <sort_obj+0x132>
 76c:	62 e3       	ldi	r22, 0x32	; 50
 76e:	70 e0       	ldi	r23, 0x00	; 0
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	f1 dd       	rcall	.-1054   	; 0x358 <stepper_RUN>
		}
		if (bin == STEEL) {
 776:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <bin>
 77a:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <bin+0x1>
 77e:	03 97       	sbiw	r24, 0x03	; 3
			stepper_RUN(CCW,STEP_90);
 780:	29 f4       	brne	.+10     	; 0x78c <sort_obj+0x148>
 782:	62 e3       	ldi	r22, 0x32	; 50
 784:	70 e0       	ldi	r23, 0x00	; 0
 786:	82 e0       	ldi	r24, 0x02	; 2
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	e6 dd       	rcall	.-1076   	; 0x358 <stepper_RUN>
		}
		bin = WHITE;					//set current bin to white
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <bin+0x1>
 794:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <bin>
		bin_WT++;						//increment white bin count
 798:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <bin_WT>
 79c:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <bin_WT+0x1>
 7a0:	01 96       	adiw	r24, 0x01	; 1
 7a2:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <bin_WT+0x1>
 7a6:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <bin_WT>
	}
	if (object == BLACK) {				//check if object type is black
 7aa:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <object>
 7ae:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <object+0x1>
 7b2:	02 97       	sbiw	r24, 0x02	; 2
 7b4:	81 f5       	brne	.+96     	; 0x816 <sort_obj+0x1d2>
		if (bin == WHITE) {
 7b6:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <bin>
 7ba:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <bin+0x1>
 7be:	01 97       	sbiw	r24, 0x01	; 1
			stepper_RUN(CCW,STEP_180);
 7c0:	29 f4       	brne	.+10     	; 0x7cc <sort_obj+0x188>
 7c2:	64 e6       	ldi	r22, 0x64	; 100
 7c4:	70 e0       	ldi	r23, 0x00	; 0
 7c6:	82 e0       	ldi	r24, 0x02	; 2
 7c8:	90 e0       	ldi	r25, 0x00	; 0
		}
		if (bin == ALUMINUM) {
 7ca:	c6 dd       	rcall	.-1140   	; 0x358 <stepper_RUN>
 7cc:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <bin>
 7d0:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <bin+0x1>
 7d4:	04 97       	sbiw	r24, 0x04	; 4
			stepper_RUN(CCW,STEP_90);
 7d6:	29 f4       	brne	.+10     	; 0x7e2 <sort_obj+0x19e>
 7d8:	62 e3       	ldi	r22, 0x32	; 50
 7da:	70 e0       	ldi	r23, 0x00	; 0
 7dc:	82 e0       	ldi	r24, 0x02	; 2
 7de:	90 e0       	ldi	r25, 0x00	; 0
		}
		if (bin == STEEL) {
 7e0:	bb dd       	rcall	.-1162   	; 0x358 <stepper_RUN>
 7e2:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <bin>
 7e6:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <bin+0x1>
 7ea:	03 97       	sbiw	r24, 0x03	; 3
			stepper_RUN(CW,STEP_90);
 7ec:	29 f4       	brne	.+10     	; 0x7f8 <sort_obj+0x1b4>
 7ee:	62 e3       	ldi	r22, 0x32	; 50
 7f0:	70 e0       	ldi	r23, 0x00	; 0
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	b0 dd       	rcall	.-1184   	; 0x358 <stepper_RUN>
		}
		bin = BLACK;					//set current bin to black
 7f8:	82 e0       	ldi	r24, 0x02	; 2
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <bin+0x1>
 800:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <bin>
		bin_BK++;						//increment black bin count
 804:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <bin_BK>
 808:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <bin_BK+0x1>
 80c:	01 96       	adiw	r24, 0x01	; 1
 80e:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <bin_BK+0x1>
 812:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <bin_BK>
 816:	08 95       	ret

00000818 <size>:
*/
int size(link **h, link **t){
	link *temp;			//will store current link while moving through queue
	int numElements;
	numElements = 0;
	temp = *h;			//point to the first item in the list
 818:	dc 01       	movw	r26, r24
 81a:	ed 91       	ld	r30, X+
 81c:	fc 91       	ld	r31, X
	
	while(temp != NULL){
 81e:	30 97       	sbiw	r30, 0x00	; 0
 820:	49 f0       	breq	.+18     	; 0x834 <size+0x1c>
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	90 e0       	ldi	r25, 0x00	; 0
		numElements++;
 826:	01 96       	adiw	r24, 0x01	; 1
		temp = temp->next;
 828:	02 80       	ldd	r0, Z+2	; 0x02
 82a:	f3 81       	ldd	r31, Z+3	; 0x03
 82c:	e0 2d       	mov	r30, r0
	link *temp;			//will store current link while moving through queue
	int numElements;
	numElements = 0;
	temp = *h;			//point to the first item in the list
	
	while(temp != NULL){
 82e:	30 97       	sbiw	r30, 0x00	; 0
 830:	d1 f7       	brne	.-12     	; 0x826 <size+0xe>
 832:	08 95       	ret
	RETURNS: An integer value of the number of links in the queue	 
*/
int size(link **h, link **t){
	link *temp;			//will store current link while moving through queue
	int numElements;
	numElements = 0;
 834:	80 e0       	ldi	r24, 0x00	; 0
 836:	90 e0       	ldi	r25, 0x00	; 0
	while(temp != NULL){
		numElements++;
		temp = temp->next;
	}			
	return(numElements);
 838:	08 95       	ret

0000083a <display>:
		 1s delay time
*/
void display(){
	unsigned int lDelay = 1000;		//used to provide 1s delay between counts
		
	while(flag_pause == 1){		//while system is paused, output bin and belt counts
 83a:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <flag_pause>
 83e:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <flag_pause+0x1>
 842:	01 97       	sbiw	r24, 0x01	; 1
 844:	a1 f5       	brne	.+104    	; 0x8ae <display+0x74>
			
		PORTC = 0x10 + bin_BK;	//black bin count
 846:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <bin_BK>
 84a:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <bin_BK+0x1>
 84e:	80 5f       	subi	r24, 0xF0	; 240
 850:	88 b9       	out	0x08, r24	; 8
		mTimer(lDelay);
 852:	88 ee       	ldi	r24, 0xE8	; 232
 854:	93 e0       	ldi	r25, 0x03	; 3
 856:	d7 dc       	rcall	.-1618   	; 0x206 <mTimer>
		PORTC = 0x20 + bin_ST;	//steel bin count			
 858:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <bin_ST>
 85c:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <bin_ST+0x1>
 860:	80 5e       	subi	r24, 0xE0	; 224
 862:	88 b9       	out	0x08, r24	; 8
		mTimer(lDelay);
 864:	88 ee       	ldi	r24, 0xE8	; 232
 866:	93 e0       	ldi	r25, 0x03	; 3
 868:	ce dc       	rcall	.-1636   	; 0x206 <mTimer>
		PORTC = 0x40 + bin_WT;	//white bin count
 86a:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <bin_WT>
 86e:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <bin_WT+0x1>
 872:	80 5c       	subi	r24, 0xC0	; 192
 874:	88 b9       	out	0x08, r24	; 8
		mTimer(lDelay);
 876:	88 ee       	ldi	r24, 0xE8	; 232
 878:	93 e0       	ldi	r25, 0x03	; 3
 87a:	c5 dc       	rcall	.-1654   	; 0x206 <mTimer>
		PORTC = 0x80 + bin_AL;	//aluminum bin count
 87c:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <bin_AL>
 880:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <bin_AL+0x1>
 884:	80 58       	subi	r24, 0x80	; 128
		mTimer(lDelay);			
 886:	88 b9       	out	0x08, r24	; 8
 888:	88 ee       	ldi	r24, 0xE8	; 232
 88a:	93 e0       	ldi	r25, 0x03	; 3
 88c:	bc dc       	rcall	.-1672   	; 0x206 <mTimer>
		PORTC = 0xF0 + size(&head,&tail);	//number of items remianing on belt 
 88e:	6e e4       	ldi	r22, 0x4E	; 78
 890:	72 e0       	ldi	r23, 0x02	; 2
 892:	82 e5       	ldi	r24, 0x52	; 82
 894:	92 e0       	ldi	r25, 0x02	; 2
 896:	c0 df       	rcall	.-128    	; 0x818 <size>
 898:	80 51       	subi	r24, 0x10	; 16
		mTimer(lDelay);
 89a:	88 b9       	out	0x08, r24	; 8
 89c:	88 ee       	ldi	r24, 0xE8	; 232
 89e:	93 e0       	ldi	r25, 0x03	; 3
 8a0:	b2 dc       	rcall	.-1692   	; 0x206 <mTimer>
		 1s delay time
*/
void display(){
	unsigned int lDelay = 1000;		//used to provide 1s delay between counts
		
	while(flag_pause == 1){		//while system is paused, output bin and belt counts
 8a2:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <flag_pause>
 8a6:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <flag_pause+0x1>
 8aa:	01 97       	sbiw	r24, 0x01	; 1
 8ac:	61 f2       	breq	.-104    	; 0x846 <display+0xc>
 8ae:	08 95       	ret

000008b0 <main>:

/**************************************************************************************
******************************** MAIN ROUTINE *****************************************
***************************************************************************************/				 

int main(){
 8b0:	1f 93       	push	r17
 8b2:	cf 93       	push	r28
 8b4:	df 93       	push	r29
	
	STATE = 0;
 8b6:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <STATE>
	
	cli();  // disable all interrupts 
 8ba:	f8 94       	cli

	setup_IO();		//setup IO registers
 8bc:	6e dc       	rcall	.-1828   	; 0x19a <setup_IO>
	setup_INT();	//setup external interrupts
 8be:	76 dc       	rcall	.-1812   	; 0x1ac <setup_INT>
	setup_ADC();	//setup ADC registers 
 8c0:	88 dc       	rcall	.-1776   	; 0x1d2 <setup_ADC>
 8c2:	95 dc       	rcall	.-1750   	; 0x1ee <pwm>
	pwm();			//generate 50% duty cycle PWM waveform @488 Hz
 8c4:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <head+0x1>

/*	DESC: Initializes the head and tail to 'NULL'
	INPUT: the head and tail pointers by reference 
*/
void setup(link **h,link **t) {
	*h = NULL;		/* Point the head to NOTHING (NULL) */
 8c8:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <head>
 8cc:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <tail+0x1>
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
 8d0:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <tail>
 8d4:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <newLink+0x1>
	setup_INT();	//setup external interrupts
	setup_ADC();	//setup ADC registers 
	pwm();			//generate 50% duty cycle PWM waveform @488 Hz
	
	setup(&head,&tail);	//initialize head and tail to NULL
	newLink = NULL;
 8d8:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <newLink>
 8dc:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <rtnLink+0x1>
	rtnLink = NULL;
 8e0:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <rtnLink>
 8e4:	78 94       	sei
		
	sei();	//enable all interrupts	
 8e6:	01 dd       	rcall	.-1534   	; 0x2ea <stepper_INIT>
	
	stepper_INIT();	//initialize stepper motor position to black
 8e8:	18 b8       	out	0x08, r1	; 8
 8ea:	83 e0       	ldi	r24, 0x03	; 3
	
	PORTC = 0x00;	//clear output to LEDs
 8ec:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <STATE>
	STATE = 3;		//go to start stage (DC motor forward)
 8f0:	c2 e3       	ldi	r28, 0x32	; 50
 8f2:	d2 e0       	ldi	r29, 0x02	; 2
		PORTB = mDC_signal[CW];	//start DC motor in clockwise direction
		STATE = 0;		
		goto POLLING_STAGE;
		
	PAUSE_STAGE:
		PORTB = mDC_signal[BRAKE];	//stop DC motor
 8f4:	13 e0       	ldi	r17, 0x03	; 3
 8f6:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <STATE>
	 
	goto POLLING_STAGE;

	POLLING_STAGE:
	
		switch(STATE){
 8fa:	83 30       	cpi	r24, 0x03	; 3
 8fc:	d1 f0       	breq	.+52     	; 0x932 <main+0x82>
 8fe:	28 f4       	brcc	.+10     	; 0x90a <main+0x5a>
 900:	81 30       	cpi	r24, 0x01	; 1
 902:	41 f0       	breq	.+16     	; 0x914 <main+0x64>
 904:	82 30       	cpi	r24, 0x02	; 2
 906:	51 f0       	breq	.+20     	; 0x91c <main+0x6c>
 908:	f6 cf       	rjmp	.-20     	; 0x8f6 <main+0x46>
 90a:	84 30       	cpi	r24, 0x04	; 4
 90c:	b9 f0       	breq	.+46     	; 0x93c <main+0x8c>
 90e:	85 30       	cpi	r24, 0x05	; 5
 910:	d9 f0       	breq	.+54     	; 0x948 <main+0x98>
 912:	f1 cf       	rjmp	.-30     	; 0x8f6 <main+0x46>
 914:	c8 dd       	rcall	.-1136   	; 0x4a6 <process_obj>
			default :
				goto POLLING_STAGE;
		}
	
	REFLECTIVE_STAGE:
		process_obj();	//process object based on ADC result
 916:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <STATE>
		STATE = 0;		
 91a:	ed cf       	rjmp	.-38     	; 0x8f6 <main+0x46>
		goto POLLING_STAGE;
 91c:	88 81       	ld	r24, Y

	SORTING_STAGE:
		PORTB = mDC_signal[BRAKE];	//stop DC motor
 91e:	85 b9       	out	0x05, r24	; 5
		sort_obj();		//sort object into specified bin
 920:	91 de       	rcall	.-734    	; 0x644 <sort_obj>
 922:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <rtnLink>
		free(rtnLink);	//remove sorted object from FIFO queue
 926:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <rtnLink+0x1>
 92a:	ac d0       	rcall	.+344    	; 0xa84 <free>
 92c:	10 93 54 02 	sts	0x0254, r17	; 0x800254 <STATE>
		STATE = 3;		//drive DC motor forward
 930:	e2 cf       	rjmp	.-60     	; 0x8f6 <main+0x46>
 932:	8a 81       	ldd	r24, Y+2	; 0x02
		goto POLLING_STAGE;
		
	START_STAGE:
		PORTB = mDC_signal[CW];	//start DC motor in clockwise direction
 934:	85 b9       	out	0x05, r24	; 5
 936:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <STATE>
		STATE = 0;		
 93a:	dd cf       	rjmp	.-70     	; 0x8f6 <main+0x46>
		goto POLLING_STAGE;
 93c:	88 81       	ld	r24, Y
		
	PAUSE_STAGE:
		PORTB = mDC_signal[BRAKE];	//stop DC motor
 93e:	85 b9       	out	0x05, r24	; 5
 940:	7c df       	rcall	.-264    	; 0x83a <display>
		display();		//display objects sorted in bins and on belt
 942:	10 93 54 02 	sts	0x0254, r17	; 0x800254 <STATE>
		STATE = 3;		//start DC motor
 946:	d7 cf       	rjmp	.-82     	; 0x8f6 <main+0x46>
 948:	80 e0       	ldi	r24, 0x00	; 0
		goto POLLING_STAGE;
 94a:	90 e0       	ldi	r25, 0x00	; 0
	
	END:
	return(0);
}//end main
 94c:	df 91       	pop	r29
 94e:	cf 91       	pop	r28
 950:	1f 91       	pop	r17
 952:	08 95       	ret

00000954 <malloc>:
 954:	0f 93       	push	r16
 956:	1f 93       	push	r17
 958:	cf 93       	push	r28
 95a:	df 93       	push	r29
 95c:	82 30       	cpi	r24, 0x02	; 2
 95e:	91 05       	cpc	r25, r1
 960:	10 f4       	brcc	.+4      	; 0x966 <malloc+0x12>
 962:	82 e0       	ldi	r24, 0x02	; 2
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <__flp>
 96a:	f0 91 62 02 	lds	r31, 0x0262	; 0x800262 <__flp+0x1>
 96e:	20 e0       	ldi	r18, 0x00	; 0
 970:	30 e0       	ldi	r19, 0x00	; 0
 972:	a0 e0       	ldi	r26, 0x00	; 0
 974:	b0 e0       	ldi	r27, 0x00	; 0
 976:	30 97       	sbiw	r30, 0x00	; 0
 978:	19 f1       	breq	.+70     	; 0x9c0 <malloc+0x6c>
 97a:	40 81       	ld	r20, Z
 97c:	51 81       	ldd	r21, Z+1	; 0x01
 97e:	02 81       	ldd	r16, Z+2	; 0x02
 980:	13 81       	ldd	r17, Z+3	; 0x03
 982:	48 17       	cp	r20, r24
 984:	59 07       	cpc	r21, r25
 986:	c8 f0       	brcs	.+50     	; 0x9ba <malloc+0x66>
 988:	84 17       	cp	r24, r20
 98a:	95 07       	cpc	r25, r21
 98c:	69 f4       	brne	.+26     	; 0x9a8 <malloc+0x54>
 98e:	10 97       	sbiw	r26, 0x00	; 0
 990:	31 f0       	breq	.+12     	; 0x99e <malloc+0x4a>
 992:	12 96       	adiw	r26, 0x02	; 2
 994:	0c 93       	st	X, r16
 996:	12 97       	sbiw	r26, 0x02	; 2
 998:	13 96       	adiw	r26, 0x03	; 3
 99a:	1c 93       	st	X, r17
 99c:	27 c0       	rjmp	.+78     	; 0x9ec <malloc+0x98>
 99e:	00 93 61 02 	sts	0x0261, r16	; 0x800261 <__flp>
 9a2:	10 93 62 02 	sts	0x0262, r17	; 0x800262 <__flp+0x1>
 9a6:	22 c0       	rjmp	.+68     	; 0x9ec <malloc+0x98>
 9a8:	21 15       	cp	r18, r1
 9aa:	31 05       	cpc	r19, r1
 9ac:	19 f0       	breq	.+6      	; 0x9b4 <malloc+0x60>
 9ae:	42 17       	cp	r20, r18
 9b0:	53 07       	cpc	r21, r19
 9b2:	18 f4       	brcc	.+6      	; 0x9ba <malloc+0x66>
 9b4:	9a 01       	movw	r18, r20
 9b6:	bd 01       	movw	r22, r26
 9b8:	ef 01       	movw	r28, r30
 9ba:	df 01       	movw	r26, r30
 9bc:	f8 01       	movw	r30, r16
 9be:	db cf       	rjmp	.-74     	; 0x976 <malloc+0x22>
 9c0:	21 15       	cp	r18, r1
 9c2:	31 05       	cpc	r19, r1
 9c4:	f9 f0       	breq	.+62     	; 0xa04 <malloc+0xb0>
 9c6:	28 1b       	sub	r18, r24
 9c8:	39 0b       	sbc	r19, r25
 9ca:	24 30       	cpi	r18, 0x04	; 4
 9cc:	31 05       	cpc	r19, r1
 9ce:	80 f4       	brcc	.+32     	; 0x9f0 <malloc+0x9c>
 9d0:	8a 81       	ldd	r24, Y+2	; 0x02
 9d2:	9b 81       	ldd	r25, Y+3	; 0x03
 9d4:	61 15       	cp	r22, r1
 9d6:	71 05       	cpc	r23, r1
 9d8:	21 f0       	breq	.+8      	; 0x9e2 <malloc+0x8e>
 9da:	fb 01       	movw	r30, r22
 9dc:	93 83       	std	Z+3, r25	; 0x03
 9de:	82 83       	std	Z+2, r24	; 0x02
 9e0:	04 c0       	rjmp	.+8      	; 0x9ea <malloc+0x96>
 9e2:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <__flp+0x1>
 9e6:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <__flp>
 9ea:	fe 01       	movw	r30, r28
 9ec:	32 96       	adiw	r30, 0x02	; 2
 9ee:	44 c0       	rjmp	.+136    	; 0xa78 <malloc+0x124>
 9f0:	fe 01       	movw	r30, r28
 9f2:	e2 0f       	add	r30, r18
 9f4:	f3 1f       	adc	r31, r19
 9f6:	81 93       	st	Z+, r24
 9f8:	91 93       	st	Z+, r25
 9fa:	22 50       	subi	r18, 0x02	; 2
 9fc:	31 09       	sbc	r19, r1
 9fe:	39 83       	std	Y+1, r19	; 0x01
 a00:	28 83       	st	Y, r18
 a02:	3a c0       	rjmp	.+116    	; 0xa78 <malloc+0x124>
 a04:	20 91 5f 02 	lds	r18, 0x025F	; 0x80025f <__brkval>
 a08:	30 91 60 02 	lds	r19, 0x0260	; 0x800260 <__brkval+0x1>
 a0c:	23 2b       	or	r18, r19
 a0e:	41 f4       	brne	.+16     	; 0xa20 <malloc+0xcc>
 a10:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 a14:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 a18:	30 93 60 02 	sts	0x0260, r19	; 0x800260 <__brkval+0x1>
 a1c:	20 93 5f 02 	sts	0x025F, r18	; 0x80025f <__brkval>
 a20:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 a24:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 a28:	21 15       	cp	r18, r1
 a2a:	31 05       	cpc	r19, r1
 a2c:	41 f4       	brne	.+16     	; 0xa3e <malloc+0xea>
 a2e:	2d b7       	in	r18, 0x3d	; 61
 a30:	3e b7       	in	r19, 0x3e	; 62
 a32:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 a36:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 a3a:	24 1b       	sub	r18, r20
 a3c:	35 0b       	sbc	r19, r21
 a3e:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <__brkval>
 a42:	f0 91 60 02 	lds	r31, 0x0260	; 0x800260 <__brkval+0x1>
 a46:	e2 17       	cp	r30, r18
 a48:	f3 07       	cpc	r31, r19
 a4a:	a0 f4       	brcc	.+40     	; 0xa74 <malloc+0x120>
 a4c:	2e 1b       	sub	r18, r30
 a4e:	3f 0b       	sbc	r19, r31
 a50:	28 17       	cp	r18, r24
 a52:	39 07       	cpc	r19, r25
 a54:	78 f0       	brcs	.+30     	; 0xa74 <malloc+0x120>
 a56:	ac 01       	movw	r20, r24
 a58:	4e 5f       	subi	r20, 0xFE	; 254
 a5a:	5f 4f       	sbci	r21, 0xFF	; 255
 a5c:	24 17       	cp	r18, r20
 a5e:	35 07       	cpc	r19, r21
 a60:	48 f0       	brcs	.+18     	; 0xa74 <malloc+0x120>
 a62:	4e 0f       	add	r20, r30
 a64:	5f 1f       	adc	r21, r31
 a66:	50 93 60 02 	sts	0x0260, r21	; 0x800260 <__brkval+0x1>
 a6a:	40 93 5f 02 	sts	0x025F, r20	; 0x80025f <__brkval>
 a6e:	81 93       	st	Z+, r24
 a70:	91 93       	st	Z+, r25
 a72:	02 c0       	rjmp	.+4      	; 0xa78 <malloc+0x124>
 a74:	e0 e0       	ldi	r30, 0x00	; 0
 a76:	f0 e0       	ldi	r31, 0x00	; 0
 a78:	cf 01       	movw	r24, r30
 a7a:	df 91       	pop	r29
 a7c:	cf 91       	pop	r28
 a7e:	1f 91       	pop	r17
 a80:	0f 91       	pop	r16
 a82:	08 95       	ret

00000a84 <free>:
 a84:	cf 93       	push	r28
 a86:	df 93       	push	r29
 a88:	00 97       	sbiw	r24, 0x00	; 0
 a8a:	09 f4       	brne	.+2      	; 0xa8e <free+0xa>
 a8c:	81 c0       	rjmp	.+258    	; 0xb90 <free+0x10c>
 a8e:	fc 01       	movw	r30, r24
 a90:	32 97       	sbiw	r30, 0x02	; 2
 a92:	13 82       	std	Z+3, r1	; 0x03
 a94:	12 82       	std	Z+2, r1	; 0x02
 a96:	a0 91 61 02 	lds	r26, 0x0261	; 0x800261 <__flp>
 a9a:	b0 91 62 02 	lds	r27, 0x0262	; 0x800262 <__flp+0x1>
 a9e:	10 97       	sbiw	r26, 0x00	; 0
 aa0:	81 f4       	brne	.+32     	; 0xac2 <free+0x3e>
 aa2:	20 81       	ld	r18, Z
 aa4:	31 81       	ldd	r19, Z+1	; 0x01
 aa6:	82 0f       	add	r24, r18
 aa8:	93 1f       	adc	r25, r19
 aaa:	20 91 5f 02 	lds	r18, 0x025F	; 0x80025f <__brkval>
 aae:	30 91 60 02 	lds	r19, 0x0260	; 0x800260 <__brkval+0x1>
 ab2:	28 17       	cp	r18, r24
 ab4:	39 07       	cpc	r19, r25
 ab6:	51 f5       	brne	.+84     	; 0xb0c <free+0x88>
 ab8:	f0 93 60 02 	sts	0x0260, r31	; 0x800260 <__brkval+0x1>
 abc:	e0 93 5f 02 	sts	0x025F, r30	; 0x80025f <__brkval>
 ac0:	67 c0       	rjmp	.+206    	; 0xb90 <free+0x10c>
 ac2:	ed 01       	movw	r28, r26
 ac4:	20 e0       	ldi	r18, 0x00	; 0
 ac6:	30 e0       	ldi	r19, 0x00	; 0
 ac8:	ce 17       	cp	r28, r30
 aca:	df 07       	cpc	r29, r31
 acc:	40 f4       	brcc	.+16     	; 0xade <free+0x5a>
 ace:	4a 81       	ldd	r20, Y+2	; 0x02
 ad0:	5b 81       	ldd	r21, Y+3	; 0x03
 ad2:	9e 01       	movw	r18, r28
 ad4:	41 15       	cp	r20, r1
 ad6:	51 05       	cpc	r21, r1
 ad8:	f1 f0       	breq	.+60     	; 0xb16 <free+0x92>
 ada:	ea 01       	movw	r28, r20
 adc:	f5 cf       	rjmp	.-22     	; 0xac8 <free+0x44>
 ade:	d3 83       	std	Z+3, r29	; 0x03
 ae0:	c2 83       	std	Z+2, r28	; 0x02
 ae2:	40 81       	ld	r20, Z
 ae4:	51 81       	ldd	r21, Z+1	; 0x01
 ae6:	84 0f       	add	r24, r20
 ae8:	95 1f       	adc	r25, r21
 aea:	c8 17       	cp	r28, r24
 aec:	d9 07       	cpc	r29, r25
 aee:	59 f4       	brne	.+22     	; 0xb06 <free+0x82>
 af0:	88 81       	ld	r24, Y
 af2:	99 81       	ldd	r25, Y+1	; 0x01
 af4:	84 0f       	add	r24, r20
 af6:	95 1f       	adc	r25, r21
 af8:	02 96       	adiw	r24, 0x02	; 2
 afa:	91 83       	std	Z+1, r25	; 0x01
 afc:	80 83       	st	Z, r24
 afe:	8a 81       	ldd	r24, Y+2	; 0x02
 b00:	9b 81       	ldd	r25, Y+3	; 0x03
 b02:	93 83       	std	Z+3, r25	; 0x03
 b04:	82 83       	std	Z+2, r24	; 0x02
 b06:	21 15       	cp	r18, r1
 b08:	31 05       	cpc	r19, r1
 b0a:	29 f4       	brne	.+10     	; 0xb16 <free+0x92>
 b0c:	f0 93 62 02 	sts	0x0262, r31	; 0x800262 <__flp+0x1>
 b10:	e0 93 61 02 	sts	0x0261, r30	; 0x800261 <__flp>
 b14:	3d c0       	rjmp	.+122    	; 0xb90 <free+0x10c>
 b16:	e9 01       	movw	r28, r18
 b18:	fb 83       	std	Y+3, r31	; 0x03
 b1a:	ea 83       	std	Y+2, r30	; 0x02
 b1c:	49 91       	ld	r20, Y+
 b1e:	59 91       	ld	r21, Y+
 b20:	c4 0f       	add	r28, r20
 b22:	d5 1f       	adc	r29, r21
 b24:	ec 17       	cp	r30, r28
 b26:	fd 07       	cpc	r31, r29
 b28:	61 f4       	brne	.+24     	; 0xb42 <free+0xbe>
 b2a:	80 81       	ld	r24, Z
 b2c:	91 81       	ldd	r25, Z+1	; 0x01
 b2e:	84 0f       	add	r24, r20
 b30:	95 1f       	adc	r25, r21
 b32:	02 96       	adiw	r24, 0x02	; 2
 b34:	e9 01       	movw	r28, r18
 b36:	99 83       	std	Y+1, r25	; 0x01
 b38:	88 83       	st	Y, r24
 b3a:	82 81       	ldd	r24, Z+2	; 0x02
 b3c:	93 81       	ldd	r25, Z+3	; 0x03
 b3e:	9b 83       	std	Y+3, r25	; 0x03
 b40:	8a 83       	std	Y+2, r24	; 0x02
 b42:	e0 e0       	ldi	r30, 0x00	; 0
 b44:	f0 e0       	ldi	r31, 0x00	; 0
 b46:	12 96       	adiw	r26, 0x02	; 2
 b48:	8d 91       	ld	r24, X+
 b4a:	9c 91       	ld	r25, X
 b4c:	13 97       	sbiw	r26, 0x03	; 3
 b4e:	00 97       	sbiw	r24, 0x00	; 0
 b50:	19 f0       	breq	.+6      	; 0xb58 <free+0xd4>
 b52:	fd 01       	movw	r30, r26
 b54:	dc 01       	movw	r26, r24
 b56:	f7 cf       	rjmp	.-18     	; 0xb46 <free+0xc2>
 b58:	8d 91       	ld	r24, X+
 b5a:	9c 91       	ld	r25, X
 b5c:	11 97       	sbiw	r26, 0x01	; 1
 b5e:	9d 01       	movw	r18, r26
 b60:	2e 5f       	subi	r18, 0xFE	; 254
 b62:	3f 4f       	sbci	r19, 0xFF	; 255
 b64:	82 0f       	add	r24, r18
 b66:	93 1f       	adc	r25, r19
 b68:	20 91 5f 02 	lds	r18, 0x025F	; 0x80025f <__brkval>
 b6c:	30 91 60 02 	lds	r19, 0x0260	; 0x800260 <__brkval+0x1>
 b70:	28 17       	cp	r18, r24
 b72:	39 07       	cpc	r19, r25
 b74:	69 f4       	brne	.+26     	; 0xb90 <free+0x10c>
 b76:	30 97       	sbiw	r30, 0x00	; 0
 b78:	29 f4       	brne	.+10     	; 0xb84 <free+0x100>
 b7a:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <__flp+0x1>
 b7e:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <__flp>
 b82:	02 c0       	rjmp	.+4      	; 0xb88 <free+0x104>
 b84:	13 82       	std	Z+3, r1	; 0x03
 b86:	12 82       	std	Z+2, r1	; 0x02
 b88:	b0 93 60 02 	sts	0x0260, r27	; 0x800260 <__brkval+0x1>
 b8c:	a0 93 5f 02 	sts	0x025F, r26	; 0x80025f <__brkval>
 b90:	df 91       	pop	r29
 b92:	cf 91       	pop	r28
 b94:	08 95       	ret

00000b96 <_exit>:
 b96:	f8 94       	cli

00000b98 <__stop_program>:
 b98:	ff cf       	rjmp	.-2      	; 0xb98 <__stop_program>
